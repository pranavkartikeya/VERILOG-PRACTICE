module pipelin2(rs1,rs2,rd,func,addr,Zout,clk1);
       input [3:0]rs1,rs2,rd,func;
		 input [7:0]addr;
		 input  clk1;
		 output [15:0]Zout;
		 reg [15:0]regfile[0:15];
		 reg [15:0]mem[0:255];
		 reg [15:0]L12_A,L12_B,L23_Z,L34_Z;
		 reg [3:0] L12_RD,L12_FUNC,L23_RD;
		 reg [7:0]L12_ADDR,L23_ADDR,L34_ADDR;
		 assign Zout= L34_Z;
		 
		 always @(posedge clk1)
		        begin
				   L12_A<= #2 regfile[rs1];
					L12_B<= #2 regfile[rs2];
					L12_RD<= #2 rd;
					L12_FUNC<= #2 func;
					L12_ADDR<=#2 addr;
				 end
				 
		always @(negedge clk1)
		       begin
				     case(func)
					  0: L23_Z <= #2 L12_A + L12_B;
					  1: L23_Z <= #2 L12_A - L12_B;
					  2: L23_Z <= #2 L12_A * L12_B; 
					  3: L23_Z <= #2 L12_A; 
					  4: L23_Z <= #2 L12_B;
					  5: L23_Z <= #2 L12_A & L12_B;
					  6: L23_Z <= #2 L12_A | L12_B;
					  7: L23_Z <= #2 L12_A ^ L12_B;
					  8: L23_Z <= #2 -L12_A;
					  9: L23_Z <= #2 -L12_B;
					  10: L23_Z <= #2 L12_A >>1;
					  11: L23_Z <= #2 L12_A <<1;
					  default: L23_Z<=#2 16'hx;
					 endcase
					 L23_RD <= L12_RD;
					 L23_ADDR <= L12_ADDR; 
					end
		always @(posedge clk1)
		       begin
				   regfile[L23_RD] <= #2 L23_Z;
					L34_Z <=#2 L23_Z;
					L34_ADDR <=#2 L23_ADDR;
				end
				
		always @(negedge clk1)
		       begin
				     mem[L34_ADDR]<= #2 L34_Z;
				end
endmodule
module pipelinetest1();
       reg  [3:0]rs1,rs2,rd,func;
		 reg [7:0]addr;
		 reg  clk1;
		 wire [15:0]Zout;
		 integer k;
		 
		 pipelin2 mypipe(rs1,rs2,rd,func,addr,Zout,clk1);
		 
		 initial
		      begin
				    clk1=0 ;
					 repeat(20)
					     begin
						   #5 clk1 =1 ;#5 clk1=0;
							
                    end
				end
				
	     initial 
		       for(k=0;k<16;k=k+1)
				     mypipe.regfile[k]=k;
					  
					  
			initial 
			     begin
				   #5 rs1=3 ;rs2=5 ;rd=10; func=0;addr=125;
					#20 rs1=3 ;rs2=8 ;rd=12; func=2;addr=126;
					#20 rs1=10 ;rs2=5 ;rd=14; func=1;addr=128;
					#20 rs1=7 ;rs2=3;rd=13; func=11;addr=127;
					#20 rs1=10 ;rs2=5 ;rd=15; func=1;addr=129;
					
					#60 for (k=125;k<131;k=k+1)
					         $display("mem[%3d] =%3d",k,mypipe.mem[k]);
								end
								
								initial
								    begin
									      $monitor ("time=%3d,F=%3d",$time,Zout);
											#300 $finish;
									 end
		    endmodule
			 
		
		
					
					
				      
					
					  					  
				      
